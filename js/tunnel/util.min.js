let programs={},frameBuffers={},textures={},glBoilerplate=initBoilerPlate();function createProgram(e,r,t){t=glBoilerplate.programFromSources(gl,r,t);gl.useProgram(t),glBoilerplate.bindScreenVerts(gl,t),programs[e]={program:t,uniforms:{}}}function resetTexture(e,r,t){textures[e]=glBoilerplate.createTexture(gl,r,t,ext.HALF_FLOAT_OES,null)}function setTexture(e,r){textures[e]=textures[r]}function resetTextureImage(e,r){textures[e]=loadTexture(gl,"js/tunnel/assets/"+r)}function resetFrameBufferForTexture(e){var r=textures[e],t=gl.createFramebuffer();gl.bindFramebuffer(gl.FRAMEBUFFER,t),gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,r,0),gl.checkFramebufferStatus(gl.FRAMEBUFFER),frameBuffers[e]=t}function setUniformForProgram(e,r,t,a){let u=programs[e].uniforms,f=u[r];switch(f||(f=gl.getUniformLocation(programs[e].program,r),u[r]=f),a){case"1i":gl.uniform1i(f,t);break;case"1f":gl.uniform1f(f,t);break;case"2f":gl.uniform2f(f,t[0],t[1]);break;case"3f":gl.uniform3f(f,t[0],t[1],t[2]);break;case"4f":gl.uniform4f(f,t[0],t[1],t[2],t[3])}}function updateUniformForProgram(e,r,t,a){setProgram(e),setUniformForProgram(e,r,t,a)}function setSize(e,r){gl.viewport(0,0,e,r)}function setProgram(e){gl.useProgram(programs[e].program)}function executeShader(e,r,t){gl.useProgram(programs[e].program),gl.bindFramebuffer(gl.FRAMEBUFFER,frameBuffers[t]);for(let e=0;e<r.length;e++)gl.activeTexture(gl.TEXTURE0+e),gl.bindTexture(gl.TEXTURE_2D,textures[r[e]]);gl.drawArrays(gl.TRIANGLE_STRIP,0,4)}function swapTextures(e,r){var t=textures[e];textures[e]=textures[r],textures[r]=t,t=frameBuffers[e],frameBuffers[e]=frameBuffers[r],frameBuffers[r]=t}function loadTexture(e,r){function t(e){return 0==(e&e-1)}const a=e.createTexture();e.bindTexture(e.TEXTURE_2D,a);const u=e.RGBA;const f=e.RGBA,o=e.UNSIGNED_BYTE;var g=new Uint8Array([0,0,255,255]);e.texImage2D(e.TEXTURE_2D,0,u,1,1,0,f,o,g);const n=new Image;return n.onload=function(){e.bindTexture(e.TEXTURE_2D,a),e.texImage2D(e.TEXTURE_2D,0,u,f,o,n),t(n.width)&&t(n.height)?e.generateMipmap(e.TEXTURE_2D):(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR))},n.src=r,a}